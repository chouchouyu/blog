Configure pgperffarm environment 1. Install git: sudo apt install git2. Update apt: sudo apt update3. Install Python3: sudo apt install python3. Also you can check your python3 version by: python3 --version.4. Install pip3:  sudo apt install pip35. Install virtualEnvWrapper: sudo pip3 install virtualenvwrapper6. Install postgresql 11: a. # add the repositorysudo tee /etc/apt/sources.list.d/pgdg.list <<ENDdeb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg mainENDb. # get the signing key and import itwget https://www.postgresql.org/media/keys/ACCC4CF8.ascsudo apt-key add ACCC4CF8.ascc. # fetch the metadata from the new reposudo apt-get updated. sudo apt-get install postgresql-11 (directly run this command without previous steps may not work)e. Sudo gedit /etc/postgresql/11/main/pg_hba.conf. Change This line:local all postgres peerShould be:local all postgres trust (peer may need password to do the next step, trust does not need password to do next step)f. Change postgres password and use it for djangoi. Restart postgresql service¡ñ sudo service postgresql restart¡ñ psql -U postgres¡ñ At the postgres=# prompt, change the user name postgres password using the following command:¡ñ ALTER USER postgres with password ¡®password¡¯;¡ñ Revert the changes in pg_hba.conf file from trust to md5 and restart postgresql. (it¡¯s possible to remain using trust without a password, but needs verification)  Note this username and password is used to super user the postgres service, which is different from the django superuser in the next steps. (NOTE: postgres is the super user name of postgresql)7. Restart postgresql: sudo service postgresql restart8. Install pgadmin4(may be use)a. Pgadmin iii can be installed via ubuntu software center9. Create folder for python class: mkdir PythonClass10. Enter python class folder: cd PythonClass11. Clone pgperffarm project from git: git clone https://github.com/JonStark3123/django-postgres-stack. You will see pgperffarm folder in side of PythonClass folder.12. VIRTUALENVWRAPPER_PYTHON=/usr/bin/python313. Load virtualenvwrapper: source /usr/local/bin/virtualenvwrapper.sh (12 and 13 needs to be done together)14. mkvirtualenv pgperffarm15. Come into rest_api folder:a. cd pgperffarmb. cd rest_api16. sudo apt-get install libpq-dev17. Install rest_api requirements: pip3 install -r requirements.txt18. You need to remove the previous migrations and create new migration files, there is a tutorial in https://micropyramid.com/blog/how-to-create-initial-django-migrations-for-existing-schema/In the postgres prompt use: delete from django_migrations;Then rm -rf <app>/migrations/python manage.py migrate --fakepython manage.py makemigrations <app>      python manage.py migrate --fake-initia19. python3 manage.py makemigrationspython3 manage.py migrate (these two steps may not be need if you¡¯ve done the previous step)20. python3 manage.py createsuperuser (this only needs to be done once at the beginning, this is the django super user, which is different from the previous postgres username and password.) recommended username: gsoccamp, password: gsoccamp This username and password are used to login 127.0.0.1:8000/admin21. python3 manage.py runserverClient1. Open a new terminal2. VIRTUALENVWRAPPER_PYTHON=/usr/bin/python33. Load virtualenvwrapper: source /usr/local/bin/virtualenvwrapper.sh4. mkvirtualenv pgperffarm5. Come into rest_api folder:a. cd pgperffarmb. Cd client6. pip3 install -r requirements.txt7. Install collectd: apt-get install collectd8. Open client settings.pya. Change build path to followb. Change database_name to follow9. Copy settings_local.py from rest_api folder to client folder;10. python3 perffarm-client.py22. Enable the viewing in PG Admin -- create a new server, put in the port as 5431, the username and password being the postgres super user: postgres, password. (It¡¯s possible to have another user and corresponding user group, but will need extra work)In rest_api, setting_local.py, there is the database name, user, password of the django admin database. Then in schema -> table -> auth_user, you should be able to see the previously created django super users. 23. Go to the client folder and run pip3 install -r requirements.txt, this installs the requirement dependencies to execute client code. 